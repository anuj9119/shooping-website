openapi: 3.0.3
info:
  title: Social Media API
  description: REST API for Social Media Demo Application
  version: 1.0.0
  contact:
    name: Social Media Team
    email: team@socialmedia.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Local development server
  - url: https://api.socialmedia.example.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - displayName
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: password123
                displayName:
                  type: string
                  example: John Doe
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update the authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  example: John Smith
                bio:
                  type: string
                  example: Software developer passionate about technology
                avatar:
                  type: string
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a user's public profile information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/follow:
    post:
      tags:
        - Users
      summary: Follow a user
      description: Follow another user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User followed successfully
        '400':
          description: Cannot follow yourself or already following
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Unfollow a user
      description: Unfollow a user you're currently following
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User unfollowed successfully
        '400':
          description: Not following this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}/followers:
    get:
      tags:
        - Users
      summary: Get user followers
      description: Retrieve a list of users following the specified user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Followers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /users/{id}/following:
    get:
      tags:
        - Users
      summary: Get users being followed
      description: Retrieve a list of users that the specified user is following
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Following list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  # Post endpoints
  /posts:
    get:
      tags:
        - Posts
      summary: Get posts feed
      description: Retrieve a paginated list of posts for the user's feed
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 10
          description: Number of posts per page
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'

    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new post with content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "Just deployed my first microservice to Kubernetes!"
                  maxLength: 280
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post by ID
      description: Retrieve a specific post by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Delete a post (only by the author)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Post deleted successfully
        '403':
          description: Not authorized to delete this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}/like:
    post:
      tags:
        - Posts
      summary: Like a post
      description: Add a like to a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Post liked successfully
        '400':
          description: Post already liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Posts
      summary: Unlike a post
      description: Remove a like from a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Post unliked successfully
        '400':
          description: Post not liked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Comment endpoints
  /posts/{postId}/comments:
    get:
      tags:
        - Comments
      summary: Get post comments
      description: Retrieve comments for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'

  /comments:
    post:
      tags:
        - Comments
      summary: Create a comment
      description: Add a comment to a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - postId
              properties:
                content:
                  type: string
                  example: "Great post! Thanks for sharing."
                  maxLength: 280
                postId:
                  type: string
                  example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}:
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: Delete a comment (only by the author)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Comment deleted successfully
        '403':
          description: Not authorized to delete this comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        displayName:
          type: string
          example: "John Doe"
        avatar:
          type: string
          nullable: true
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          example: "Software developer passionate about technology"
        followersCount:
          type: integer
          example: 150
        followingCount:
          type: integer
          example: 75
        postsCount:
          type: integer
          example: 42
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Post:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        content:
          type: string
          example: "Just deployed my first microservice to Kubernetes!"
        authorId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        author:
          $ref: '#/components/schemas/User'
        likesCount:
          type: integer
          example: 24
        commentsCount:
          type: integer
          example: 8
        sharesCount:
          type: integer
          example: 3
        isLiked:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Comment:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        content:
          type: string
          example: "Great post! Thanks for sharing."
        postId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        authorId:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    PostList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    CommentList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 50
        totalPages:
          type: integer
          example: 3
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    UserList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Invalid input provided"
        status:
          type: integer
          example: 400
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          example: "/api/posts"
