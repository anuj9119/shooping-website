# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
 branches:
   include:
     - main
 paths:
   exclude:
     - azure-pipelines.yml
     - k8s

resources:
- repo: self

variables:
  - group: Shoppinggroup

  # Agent VM image name
pool:
 name: 'shopping-agent'

stages:
- stage: Build_first_Dockerfile
  displayName: Build and push for frontend
  jobs:
  - job: BuildFrontend
    displayName: Build and push for frontend
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Build_second_Dockerfile
  displayName: Build and push backend
  jobs:
  - job: BuildBackend
    displayName: Build for 2nd Dockerfile
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository1)
        dockerfile: $(dockerfilePath1)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: creating_container
  displayName: "Create containers from ACR images and deploy on AKS"
  jobs:
  - job: containercreating
    displayName: "Deploy Frontend, Backend, and DB on AKS"
    steps:
      - task: KubernetesManifest@1
        displayName: "Deploy manifests to AKS"
        inputs:
          action: deploy
          connectionType: azureResourceManager
          azureSubscriptionConnection: 'Azure for Students(4f077f4d-a3e4-40bb-8c37-fb3e85c8e67d)'
          azureResourceGroup: 'social-media-group'
          kubernetesCluster: 'socialmedia_aks'
          namespace: shopping
          manifests: |
            k8s/backend-deployment.yaml
            k8s/frontend-deployment.yaml
            k8s/mysql-deployment.yaml
          rolloutStatusTimeout: 400

      - script: |
          kubectl set image deployment/shopping-frontend shopping-frontend=shoopingreg.azurecr.io/shoopingfrontend:$(Build.BuildId) -n shopping
          kubectl set image deployment/shopping-backend shopping-backend=shoopingreg.azurecr.io/shoopingbackend:$(Build.BuildId) -n shopping
        displayName: "Update images with latest BuildId"
